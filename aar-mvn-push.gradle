/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'


//static def isReleaseBuild() {
//    return false
//}

static def getRepositoryUrl() {
    def releaseUrl = 'https://packages.aliyun.com/maven/repository/2032937-release-WOG3Pm/'
    return releaseUrl
}

static def getDebugRepositoryUrl() {
    def snapshotUrl = 'https://packages.aliyun.com/maven/repository/2032937-snapshot-If0ajw/'
    return snapshotUrl
}
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: getRepositoryUrl()) {
                    authentication(
                            userName: MAVEN_userName,
                            password: MAVEN_password
                    )
                }
                snapshotRepository(url: getDebugRepositoryUrl()) {
                    authentication(
                            userName: MAVEN_userName,
                            password: MAVEN_password
                    )
                }
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        options.addStringOption("charset", "UTF-8")
        failOnError = false
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}